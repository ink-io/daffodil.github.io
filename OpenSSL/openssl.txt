OpenSSL Architecure

1.libcrypto:
    核心库，提供以及实现了密码学原语.
    它还提供了一组供libssl和libcrypto使用的支持服务，以及诸如CMS和OCSP之类的协议的实现。

2. Engine:
    dynamically loadable modules that are registered with libcrypto

3. libssl
    实现了tls和dtls协议

4. Applications
    command tools
    a. 密钥的生成以及检查
    b. 证书的生成
    c. SSL/TLS test tools
    d. ASN.1 编码规范

存储格式:
    PEM: 文本

RSA------
To generate an RSA key, use genrsa command

openssl genrsa -aes256 -out private.key 4096
    -aes256 使用aes256 bit的对称加密 加密私钥密码

openssl rsa -text -in private,key
    查看密钥的结构

生成对应的公钥
openssl rsa -in private.key -pubout -out public.key

DSA------

dsa paramaters are created is a two step process;
1. 生成dsa参数, 2. 创建key (下面的语句将两阶段合并)
    openssl dsaparam -genkey 4096 | openssl dsa -out dsa.key -aes256

ECDSA-----
椭圆曲线加密
openssl ecparam -genkey -name secp384r1 | openssl ec -out ecdsa_private.key -aes256


Creating certificate Signing Requests
生成证书请求:
    openssl req -new -key private.key -out private.csr
    生成的证书请求中的 extra 部分重的 challenge password 部分输入的密码 
    的作用是为了吊销证书的时候使用的.

    当我们需要续签证书的时候，如果没有更改信息,为了方便我们可以使用以下语句重新生成请求
    openssl x509 -x509toreq -in private.crt -out private.csr -signkey private.key

非交互式的生成请求  需要用到 -config 选项
openssl req -new -key private.key -config cert.config -out private.csr
cat > cert.config << EOF
[req]
prompt = no
distinguished_name = dn
input_password = zyx748521

[dn]
CN = www.zyxasr.com
emailAddress = zyxasr@qq.com
O = NETEASE
OU = OPS
L = HZ
ST = ZJ
C = CN
EOF

当我们拥有csr文件时，我们可以自己签署
openssl x509 -req -days 3650 -in nginx.csr -signkey nginx.key -out nginx.crt

直接使用密钥生成证书
$ openssl req -new -x509 -days 365 -key fd.key -out fd.crt
不需用回答问题
$ openssl req -new -x509 -days 365 -key fd.key -out fd.crt \
 -subj "/C=GB/L=London/O=Feisty Duck Ltd/CN=www.feistyduck.com"
-----> subj 对应的内容   
    Signature Algorithm: ecdsa-with-SHA256
        Issuer: C=CN, ST=ZJ, L=HZ, O=NETEASE, OU=OPS, CN=zyxasr.com/emailAddress=zyxasr@qq.com

创建对多个主机名有效的证书
编写需要添加的域名文件 
cat > xxx.txt  << EOF
subjectAltName = DNS:*.feistyduck.com, DNS:feistyduck.com
EOF
    在签署的时候加上选项
    openssl x509 -req -days 365 \
    -in fd.csr -signkey fd.key -out fd.crt \
    -extfile fd.ext


-----
检验证书
 openssl x509 -text -in fd.crt -noout
 -text: print certificate contents 
 -noout: 可以通过不输出编码证书本身来减少混乱，



-------
密钥和证书的转换
证书格式:
    Binary(DER) certificate
        Contains an X.509 certificate in its raw form, using DER ASN.1 encoding.
    ASCII(PEM) certificate(s)
        Contains a base64-encoded DER certificate with --BEGIN CERTIFICATE --- and --END CERTIFICATE---
        通常，每个文件只显示一个证书，尽管某些程序根据上下文允许一个以上的证书
        例如，较早的Apache Web服务器版本要求服务器证书必须在一个文件中单独存在，而所有中间证书在另一个文件中应同时存在。
    PKCS#7 certificate
        RFC 2315中定义了一种用于传输签名或加密数据的复杂格式。通常以.p7b和.p7c扩展名出现，并且可以根据需要包括整个证书链。
        Java的keytool实用程序支持这种格式。

key格式:
    DER 
        Contains a private key in its raw form, using DER ASN.1 encoding
        OpenSSL以其自己的传统（SSLeay）格式创建密钥。还有一种称为PKCS＃8的替代格式（在RFC 5208中定义），但并未广泛使用。 
        OpenSSL可以使用pkcs8命令在PKCS＃8格式之间进行转换。

    PEM
        包含base64编码的DER密钥，有时还包含其他元数据（例如，用于密码保护的算法）。


PKCS#12(PFX) key and certificate(s)
    可以存储和保护服务器密钥以及整个证书链的复杂格式, .p12和.pfx扩展名很常见。此格式通常在Microsoft产品中使用，但也用于客户端证书。
    如今，PFX名称已用作PKCS＃12的同义词，即使PFX在很久以前就使用另一种格式（PKCS＃12的早期版本）也是如此。您不太可能在任何地方遇到旧版本。



PEM and DER conversion
    将pem转化成为der
    openssl x509 -inform PEM -in ec2.crt -outform DER -out ec2.der
    pem格式的证书只是der的证书经过base64编码后，加上页眉页脚转化而成
    我们查看 pem格式的ec2.crt :
        -----BEGIN CERTIFICATE-----
        MIICEjCCAbigAwIBAgIJAL0+a8xPC8n5MAoGCCqGSM49BAMCMHoxCzAJBgNVBAYT
        AkNOMQswCQYDVQQIDAJaSjELMAkGA1UEBwwCSFoxEDAOBgNVBAoMB05FVEVBU0Ux
        DDAKBgNVBAsMA09QUzETMBEGA1UEAwwKenl4YXNyLmNvbTEcMBoGCSqGSIb3DQEJ
        ARYNenl4YXNyQHFxLmNvbTAeFw0yMDA1MDExNDI0NDhaFw0zMDA0MjkxNDI0NDha
        MHoxCzAJBgNVBAYTAkNOMQswCQYDVQQIDAJaSjELMAkGA1UEBwwCSFoxEDAOBgNV
        BAoMB05FVEVBU0UxDDAKBgNVBAsMA09QUzETMBEGA1UEAwwKenl4YXNyLmNvbTEc
        MBoGCSqGSIb3DQEJARYNenl4YXNyQHFxLmNvbTBZMBMGByqGSM49AgEGCCqGSM49
        AwEHA0IABGEeQHy4GRf4ivv6e0QmY/DJkgYhE72uiMTPMnuNwumLt75hm7NUumKT
        plIVF70QyUphvjsiS0Vu8GnDihCr0hyjJzAlMCMGA1UdEQQcMBqCDCouenl4YXNy
        LmNvbYIKenl4YXNyLmNvbTAKBggqhkjOPQQDAgNIADBFAiEAlFt71jr2xUVqACdV
        dD7oqqU6qH8cxzHSItT8eDSgTgECIAoRbk3g+pe3ERH41ZZl+xz9xdc1L33MTlHS
        WilK1mug
        -----END CERTIFICATE-----
    我们将生成的ec2.der文件base64编码, 将会得到与pem格式大同小异的输出
        cat ec2.der | base64
        MIICEjCCAbigAwIBAgIJAL0+a8xPC8n5MAoGCCqGSM49BAMCMHoxCzAJBgNVBAYTAkNOMQswCQYD
        VQQIDAJaSjELMAkGA1UEBwwCSFoxEDAOBgNVBAoMB05FVEVBU0UxDDAKBgNVBAsMA09QUzETMBEG
        A1UEAwwKenl4YXNyLmNvbTEcMBoGCSqGSIb3DQEJARYNenl4YXNyQHFxLmNvbTAeFw0yMDA1MDEx
        NDI0NDhaFw0zMDA0MjkxNDI0NDhaMHoxCzAJBgNVBAYTAkNOMQswCQYDVQQIDAJaSjELMAkGA1UE
        BwwCSFoxEDAOBgNVBAoMB05FVEVBU0UxDDAKBgNVBAsMA09QUzETMBEGA1UEAwwKenl4YXNyLmNv
        bTEcMBoGCSqGSIb3DQEJARYNenl4YXNyQHFxLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA
        BGEeQHy4GRf4ivv6e0QmY/DJkgYhE72uiMTPMnuNwumLt75hm7NUumKTplIVF70QyUphvjsiS0Vu
        8GnDihCr0hyjJzAlMCMGA1UdEQQcMBqCDCouenl4YXNyLmNvbYIKenl4YXNyLmNvbTAKBggqhkjO
        PQQDAgNIADBFAiEAlFt71jr2xUVqACdVdD7oqqU6qH8cxzHSItT8eDSgTgECIAoRbk3g+pe3ERH4
        1ZZl+xz9xdc1L33MTlHSWilK1mug

    PKCS#12 CONVERSION
    pem --> pkcs#12
    openssl pkcs12 -export -name "My Certificate"  -out fd.p12  -inkey fd.key  -in fd.crt
    pkcs#12 --> pem
    openssl pkcs12 -in fd.p12 -out fd.pem -nodes
    转换后的fd.pem 包含了密钥，证书以及可能的中间证书，所以需要手动的剥离


    PKCS#7
    pem --> pkcs#7
    openssl crl2pkcs7 -nocrl -out fd.p7b -certfile fd.crt -certfile fd-chain.crt

    

-----------Configuration
获取支持的套件列表
openssl ciphers -v 'ALL:COMPLEMENTOFALL' 

每一行包含的信息
Suite name
Required minimum protocol version
Key exchange algorithm
Authentication algorithm
Cipher algorithm and strength
MAC (integrity) algorithm
Export suite indicator

openssl ciphers -v 'RSA'

组合关键字
openssl ciphers -v 'RC4+SHA'

The weak suites can be identified with the following cipher strings:
aNULL; no authentication
eNULL; no encryption
LOW; low-strength suites
3DES; effective strength of 108 bits
MD5; suites that use MD5
EXP; obsolete export suites

[sign签署带有扩展性息的ca 证书]

openssl req -new -x509 -extensions v3_ca -key front-proxy-ca.key -out front-proxy-ca.crt -config openssl.conf
(umask 077; openssl genrsa -out server.key 4096)
``` openssl.conf
[ req ]
default_bits = 4096
prompt = no
default_md = sha256
distinguished_name = dn

[ dn ]
CN = front-proxy-ca

[ v3_ca ]
subjectKeyIdentifier=hash
basicConstraints=critical,CA:TRUE
keyUsage=critical,keyEncipherment,digitalSignature,keyCertSign
```