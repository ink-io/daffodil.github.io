COUNT()
	COUNT(Field_Name)
	COUNT(/reguler_expression/)
	COUNT(*)
	// 以上三种用法 下面的函数基本都可以使用
	返回非空字段值的数量。
DISTINCT()
	求不同值
INTEGRAL() 求积分
	INTEGRAL(Field, #[积分单位，通常取时间])
	SELECT "water_level" FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T00:30:00Z'
	name: h2o_feet
	time                 water_level
	----                 -----------
	2019-08-18T00:00:00Z 2.352
	2019-08-18T00:06:00Z 2.379
	2019-08-18T00:12:00Z 2.343
	2019-08-18T00:18:00Z 2.329
	2019-08-18T00:24:00Z 2.264
	2019-08-18T00:30:00Z 2.267
	SELECT INTEGRAL("water_level") FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T00:30:00Z'
	name: h2o_feet
	time                 integral
	----                 --------
	1970-01-01T00:00:00Z 4184.82   
	简单来说就是求个定积分  默认单位为秒, 00:00:00 到 00:30:00 之间为1800秒
	所以，x轴为1800， 我们取y轴的值约等于2.343, 所以大致的积分就是2.324*1800 = 4217.4

	> SELECT integral("water_level",1m) FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T
	00:30:00Z'
	name: h2o_feet
	time                 integral
	----                 --------
	1970-01-01T00:00:00Z 69.747	
	我们取积分单位为分钟， 所以x轴等于30，所以积分大致为69.747
MEAN()
	返回字段值的算术平均值（平均值）。
		SELECT MEAN(*) FROM "h2o_feet"
MEDIAN()
	从字段值的排序列表中返回中间值。
MODE()
	返回字段值列表中最频繁的值。
SPREAD()
	返回最小和最大字段值之间的差。
STDDEV()
	返回字段值的标准差。
SUM()
	return the sum of field values



[SELECTORS]

BOTTOM()
	返回最小的N个字段值。
	BOTTOM(field_key,N)
	BOTTOM(field_key,tag_key(s),N)
		返回标签键的N个标签值的最小字段值。
		SELECT BOTTOM("water_level","location",2) FROM "h2o_feet"
		返回与location相关联的两个最小值, 
		name: h2o_feet
		time                   bottom   location
		----                   ------   --------
		2015-08-29T10:36:00Z   -0.243   santa_monica
		2015-08-29T14:30:00Z   -0.61    coyote_creek
	BOTTOM(field_key,N),tag_key(s),field_key(s)
		SELECT BOTTOM("water_level",2),"location","level description" FROM "h2o_feet"  
		注意，tag不在括号里面
FIRST()
	Returns the field value with the oldest timestamp.
	FIRST(field_key),tag_key(s),field_key(s)
	可以指定由tag，field组成的最老的字段

LAST()
	最新的时间戳
	LAST(field_key),tag_key(s),field_key(s)
MAX()
	MAX(field_key),tag_key(s),field_key(s)
MIN()
	MIN(field_key),tag_key(s),field_key(s)
PERCENTILE()
	Returns the Nth percentile field value.
	返回第N个百分位数字段值。
	PERCENTILE(field_key,N),tag_key(s),field_key(s)
		仅针对数值字段
		返回与括号中的字段关键字以及相关标签和/或字段关联的第N个百分位数字段值。
	PERCENTILE(field_key,N)
		返回与字段键关联的第N个百分位数字段值
	//SELECT PERCENTILE("water_level",90) FROM "h2o_feet"
	//	返回需要大于water_level的前百分之90的字段值的值
		name: h2o_feet
		time                 percentile
		----                 ----------
		2019-09-13T19:36:00Z 7.969		// 比如我们只要大于7.969, 我们就可以大于90%的数值
	PERCENTILE(<field_key>,100) is equivalent to MAX(<field_key>).
	PERCENTILE(<field_key>, 50) is nearly equivalent to MEDIAN(<field_key>),

SAMPLE()
	返回N个字段值的随机样本。
	SAMPLE（）使用储层采样来生成随机点
	SAMPLE(field_key,N)
	SAMPLE(field_key,N),tag_key(s),field_key(s)

TOP()
	返回最大的N个字段值
	TOP(field_key,N)
	TOP(field_key,tag_key(s),N)
	TOP(field_key,N),tag_key(s),field_key(s)

[Transformations]

ABS()
	返回字段的绝对值
CUMULATIVE_SUM(	
	返回后续字段值的运行总计。
	The query returns the running total of the field values for each field key that stores numerical values
	// 直会计算所有的数值类型的字段
		SELECT "water_level" FROM "h2o_feet" WHERE time >= '2015-08-18T00:00:00Z' AND time <= '2015-08-18T00:30:00Z' AND "location" = 'santa_monica'

		name: h2o_feet
		time                   water_level
		----                   -----------
		2015-08-18T00:00:00Z   2.064
		2015-08-18T00:06:00Z   2.116
		2015-08-18T00:12:00Z   2.028
		2015-08-18T00:18:00Z   2.126
		2015-08-18T00:24:00Z   2.041
		2015-08-18T00:30:00Z   2.051

		SELECT CUMULATIVE_SUM("water_level") FROM "h2o_feet" WHERE time >= '2015-08-18T00:00:00Z' AND time <= '2015-08-18T00:30:00Z' AND "location" = 'santa_monica'

		name: h2o_feet
		time                   cumulative_sum
		----                   --------------
		2015-08-18T00:00:00Z   2.064
		2015-08-18T00:06:00Z   4.18
		2015-08-18T00:12:00Z   6.208
		2015-08-18T00:18:00Z   8.334
		2015-08-18T00:24:00Z   10.375
		2015-08-18T00:30:00Z   12.426

DERIVATIVE()
	返回后续字段值之间的变化率。
	相当于计算tan, y轴为两个点之间的时间跨度，单位为s，
		SELECT "water_level" FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T00:30:00Z'
		name: h2o_feet
		time                 water_level
		----                 -----------
		2019-08-18T00:00:00Z 2.352
		2019-08-18T00:06:00Z 2.379
		2019-08-18T00:12:00Z 2.343
		2019-08-18T00:18:00Z 2.329
		2019-08-18T00:24:00Z 2.264
		2019-08-18T00:30:00Z 2.267	

		SELECT DERIVATIVE("water_level") FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T00:30:00Z'
		name: h2o_feet
		time                 derivative
		----                 ----------
		2019-08-18T00:06:00Z 0.00007500000000000037  //此处的值是通过 (2.379-2.352)/(360s/1s)  时间间隔为360s
		2019-08-18T00:12:00Z -0.00010000000000000009
		2019-08-18T00:18:00Z -0.00003888888888888831
		2019-08-18T00:24:00Z -0.00018055555555555663
		2019-08-18T00:30:00Z 0.000008333333333333649

		当然也可以指定时间间隔的单位 
			DERIVATIVE("FIELD", 6m)... --> ( 2.116 - 2.064 )/(6m/6m)
			DERIVATIVE("FIELD", 1m)... --> ( 2.116 - 2.064 )/(6m/1m)
	advanced syntax
		高级用法
		DERIVATIVE(mean("fiield"),#) 先计算mean, 在套用derivative(#.#)


DIFFERENCE()
	返回后续字段值之间相减的结果。
ELAPSED()
	时间戳之间的差值
EXP()
	返回指数

MOVING_AVERAGE()
	滚动计算相邻N个字段的平均值
	MOVING_AVERAGE(field_key,N)
	
	SELECT moving_average("water_level",2) FROM "h2o_feet" WHERE "location" = 'santa_monica' AND time >= '2019-08-18T00:00:00Z' AND time <= '2019-08-18T00:30:0
	0Z'
	name: h2o_feet
	time                 moving_average
	----                 --------------
	2019-08-18T00:06:00Z 2.3655    (2.352+2.379)/2
	2019-08-18T00:12:00Z 2.3609999999999998 (2.379+2.343)/2 ...
	2019-08-18T00:18:00Z 2.336
	2019-08-18T00:24:00Z 2.2965
	2019-08-18T00:30:00Z 2.2655

NON_NEGATIVE_DERIVATIVE()
	返回后续字段值之间的非负变化率。非负变化率包括正变化率和等于零的变化率。

ROUND()
	返回舍入到最接近整数的后续值