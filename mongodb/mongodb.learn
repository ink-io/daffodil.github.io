MongoDB

db --> collection --> document

db.users.insertOne(         ----->collection
    {
        name: "Ding Deng", |
        age: 26,           |----> Document
        status: "Ready"    |
    }
)

Documents:

Documents have the following restrictions on field names:

    _id is reserved for used as a primary key; value must unique; may be of any type other than array
    Field Can not contain the null character.
    Top-level Field Cannot start with the $ character
    

Mongo shell Data Type:

    Date类型
        Date()
        ISODate()

    ObjectId类型
        new ObjectId
    
    NumberLong类型:
        THe mongo shell treats all numbers as floating-point values by default.
        mongo shell provides NumberLong() wrapper to handle 64-bits interage.

        NumberLong 在使用$inc增加时，会转换成floating-point value.

        > db.collection.findOne({_id:10})
             { "_id" : 10, "calc" : NumberLong("2555555000005") }

        > db.collection.updateOne({_id:10},{ $inc:{calc:5}}) //修改
             { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

        > db.collection.findOne({_id:10})
             { "_id" : 10, "calc" : 2555555000010 }

    NumberInt类型
        --> 32-bits interage transfor wrapper.

    NumberDecimal类型(Decimal: 小数)



MongoDB CURD

Insert Documents
    db.collection.insertOne()
    db.collection.insertMany()

    Read Operations
    read Operations retrieves(检索) documents from a collection

        db.mycoll.find(          
        db.mycoll.findOne(            
        db.mycoll.findOneAndReplace(
        db.mycoll.findAndModify(      
        db.mycoll.findOneAndDelete(   
        db.mycoll.findOneAndUpdate(


query Document

    SELECT ALL Documents in a collection
        mycoll.Find(
             ctx,
            bson.D{},
        )
        select * from inventory
    
    Specify Equality Condition

        mycoll.Find(
            ctx,
            bson.D{{"status","D"}}
        )
        SELECT * FROM inventory WHERE status = "D";

    Specify Condition Using Query Operators

        mycoll.Find(
            ctx,
            bson.D{
                {"status",bson.D{
                    {"$in", bson.A{"A","B","D"}}
                }
            }}
        )
        SELECT * FROM inventory WHERE status in ("A","D","B");
    
    Specify AND Conditions

        mycoll.Find(
            ctx,
            bson.D{
                {"status","D"},
                {"qty",bson.D{
                    {"$lt",40},
                }}
            }
        )
        SELECT * FROM inventory WHERE status = "D" AND qty < 40;

    嵌套结构的查询      
        cursor, err := coll.Find(
        context.Background(),
        bson.D{
            {"size", bson.D{
                {"w", 21},
                {"h", 14},
                {"uom", "cm"},
            }},
        })
        嵌套结构在查询的时候必须要保证value要完全一致，并且key的查询顺序也要和原文档遗址

        cur, err := doc1.Find(ctx,bson.D{
            {"size.h",10},
        })
        查询嵌套的时候，可以使用dot notation来查询更下一级的字段


    查询数组
    
        cursor, err := coll.Find(
            context.Background(),
            bson.D{{"tags", bson.A{"red", "blank"}}},
        )
        这个样子的查询只会查询tags 字段包含red和blank的doc，并且必须是red在前，blank在后才行

        如果想查找，包含了red和blank，但是也可以有其他元素的数组时，应该使用"$all"

        cur , _ := doc1.Find(ctx,bson.D{
            {"tags",bson.D{
                {"$all",bson.A{"red"}},
            }},
        })

        查询数组中的单个值是否满足给予的条件
        cur , _ := doc1.Find(ctx,bson.D{
            {"dim_cm",bson.D{
                {"$gt",26},
                {"$lt",50},
            }},
	    })
        查找 dim_cm中的值包含大于26的doc

        cur , _ := doc1.Find(ctx,bson.D{
            {"dim_cm.0",bson.D{
                {"$gt",22},
                {"$lt",30},
            }},
	    })
        使用数组中的元素序号， 进行查找

    仅返回_id字段和指定字段
        需要添加选项，并且将需要投影（显示）的字段的值设置为1
            projection := bson.D{ -----> 设置指定字段
                {"item",1},
                {"status",1},
            }
            cur,_ := newcoll.Find(
                ctx,
                bson.D{{"status","A"}},
                options.Find().SetProjection(projection),
            )
            SELECT _id,status,item FROM inventory WHERE status = 'A';
        输出会自动天加上_id
        {"_id": {"$oid":"5ddde2d8255ea8d4fdc78e06"},"item": "journal","status": "A"}
        {"_id": {"$oid":"5ddde2d8255ea8d4fdc78e07"},"item": "notebook","status": "A"}
        {"_id": {"$oid":"5ddde2d8255ea8d4fdc78e0a"},"item": "postcard","status": "A"}

        如果不想显示_id字段，我们可以在projection 中jiang _id的值设置为0.
        [注意]: 指定显示字段不能和指定不显示某些字段混用
            like    {"item", 1},
                    {"size.uom", 1}, 

    返回嵌入式文档中的指定字段 

        projection = bson.D{
            {"item", 1},
            {"status", 1},
            {"size.uom", 1},
        }

    nil 查询 
        {"item", nil}
        会返回item的值为nil 或者不包含item字段的documents

    Type Check:
        BsonType:

        cur, _ := newcoll.Find(
            ctx,
            bson.D{
                {"item", bson.D{
                    {"$type",10},
                }},
            },
        )
        {"_id": {"$numberInt":"1"},"item": null}
    exists Check
        cur, _ := newcoll.Find(
            ctx,
            bson.D{
                {"item", bson.D{
                    {"$exists",false},
                }},
            },
        )
        exists => false 返回item不存在的document
        +=> true 返回存在item字段的documents


写关注:
    简单来说就是表达了，客户端过来写入数据，主服务器写入后，是否在保存在本地之后就返回给客户端结果，还是写入本地，并且已经有大多数vote secondary过来复制成功 之后返回给客户端
    两种情况
    w: 数字 (为1的话, 主数据库写入本地 便可以返回，超过一的话，比如为2，就表示主数据写入外加一个从服务器写入成功，这个数值最大为副本集中数据承载成员的总数。)
    w: majority  大多数ote 成员复制成功之后 便可以返回成功的消息,  三个返回两个，五个返回三个.